# –≤ –Ω–∞—á–∞–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞.
# -*- coding: utf-8 -*import
import random

from aiogram.filters.callback_data import CallbackData
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext

from loader import dp, Bot, router1, bot
from aiogram.filters.command import Command
from aiogram.filters.text import Text
from aiogram.types import Message, CallbackQuery
from aiogram import types, Router
from captcha.image import ImageCaptcha
from random import choice
from aiogram.methods.send_photo import SendPhoto
from aiogram.types import FSInputFile
from db import add_user, create_database, get_user, admin_add_staff, create_database_staff
from state import Start, Add_staff, Staff, Staff2
from config import admins, moder_id

from keyboards.default import kb, admin_kb, admin2_kb
from keyboards.inline import inline_kb, generate_city, generate_area, inline_kb3

'''
–ö–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢! –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –ï—Å–ª–∏ –ø–æ-
–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏. –ü–æ—Å–ª–µ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è. –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
—Å—Ä–∞–∑—É –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –ø—Ä–æ—à–µ–ª –æ–Ω –∫–∞–ø—á—É, –∏–ª–∏ –Ω–µ—Ç. 

–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è. –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä–∞—Ñ—É –ø—Ä–æ—à–µ–ª —á–µ–ª –∫–∞–ø—á—É –∏–ª–∏ –Ω–µ—Ç. –ù—É –∏ —Å–æ–æ—Ç–≤–µ
—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤ –Ω–æ–ª—å, –∞ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ –µ–¥–∏–Ω–∏—Ü—É. –ï—Å–ª–∏ –≥–µ—Ç captcha –±—É–¥–µ—Ç == 1, —Ç–æ –≥—É–¥. –ï—Å–ª–∏ –Ω–µ—Ç
–¥–∞–µ–º –µ–º—É –∫–∞–ø—á—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–µ–ª –æ–Ω –µ—ë –∏–ª–∏ –Ω–µ—Ç. –ï—Å–ª–∏ –ø—Ä–æ—à–µ–ª, –∑–Ω–∞—á–∏—Ç –∏–Ω—Å–µ—Ä—Ç –≤ –≥—Ä–∞—Ñ—É –µ–¥–∏–Ω–∏—á–∫—É.

–í–æ–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª–µ–Ω –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –∑–∞–Ω–µ—Å–µ–Ω–∏—è —à–æ–ø–∞ –Ω–∞ –≤–µ—Ç—Ä–∏–Ω—É. –¢–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É. –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–µ –≤ 
—Å–∞–º–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –≤ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–µ–π—Ç–∞. –î–∞–Ω–Ω—ã–µ –∑–∞–Ω–µ—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å—Ç–µ–π—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –µ–≥–æ chat_id –∏ 
(—á—Ç–æ –≤–∞–∂–Ω–æ) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ —á–∞—Ç–µ. –¢–æ –µ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å chat.id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ —Å—Ç–µ–π—Ç–µ. –ù–æ –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–¥–µ –ª–∏–±–æ. –¢–æ –µ—Å—Ç—å –∏—Ö –Ω—É–∂–Ω–æ –≤—ã—á–ª–µ–Ω—è—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
–í–æ–ø—Ä–æ—Å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∑–¥–µ—Å—å, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –º–Ω–µ –≤—ã—Ç–∞—â–∏—Ç—å chat.id. –ß–∞—Ç –≥–ø—Ç –Ω–∞–∫–∏–Ω—É–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–¥–µ—é –∫—Å—Ç–∞—Ç–∏.
–û–Ω –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ä–∞–∑–¥–µ–ª–∏—Ç—å –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Ç–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–æ–≤ –∏ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ —Ç–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. 
–≠—Ç–æ —Ä–µ—à–∞–µ—Ç —Ä—è–¥ –∑–∞–¥–∞—á. –ù–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏. –ó–∞–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –∏ –≤—Ä—É—á–Ω—É—é. –ù–æ —ç—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ.
–ê –Ω—É –∫—Å—Ç–∞—Ç–µ –≤–æ–æ–±—â–µ—Ç–æ —ç—Ç–æ –∞—Ö—É–µ–Ω–Ω–æ –≤—Å–µ —É–ø—Ä–æ—â–∞–µ—Ç. –ü–æ —Å—É—Ç–∏ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –≤ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –¥—Ä—É–≥—É—é. –ò —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 
–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ–¥–Ω—É –∫–ª–∞–≤–∏—à—É. –ù—É –≤—Å–µ —Ç–æ–≥–¥–∞. –ë—É–¥–µ–º –Ω–∞—Ö—É–π –ø—Ä–æ–±–æ–≤–∞—Ç—å.

–ï–±–∞—Ç—å –æ—Ö—É–µ–Ω–Ω–æ –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è –∏–¥–µ—è –∫—Å—Ç–∞—Ç–∏! –Ø –ø–æ—á–µ–º—É —Ç–æ –æ–± —ç—Ç–æ–º –±–ª—è—Ç—å –Ω–µ –ø–æ–¥—É–º–∞–ª –≤–∞—â–µ. –≠—Ç–æ –≤–Ω–∞—Ç—É—Ä–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ
inline_res = InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data='asdf {message.text}')
'''


@router1.message(Command('start'))
async def handler1(message: Message):
    await create_database_staff()
    id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username
    image = ImageCaptcha(fonts=['caviar-dreams.ttf'], width=300, height=150)
    letters = ['A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'Q', 'q', 'H', 'h', 'I', 'i',
               'J', 'j', 'K', 'k', 'L', 'l' 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r',
               '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
    code = []
    for i in range(7):
        code.append(choice(letters))
    image.write(code, 'out.png')
    photo = FSInputFile('out.png')
    a = ''
    for el in code:
        a += str(el)
    print(a)
    print(code)
    if await get_user(id) is None:
        await add_user(id, name, username)
        await SendPhoto(chat_id=message.from_user.id, photo=photo)
    else:
        await message.answer('–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –î–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!', reply_markup=kb)

    @router1.message(Text(a))
    async def handler2(message: Message):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç!')
    # else:
    # /   await message.answer('–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –î–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!')


@router1.message(Text('üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üõí'))
async def handler3(message: types.Message, state: FSMContext):
    inline_kb2, data = await generate_city()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä', reply_markup=inline_kb2)
    await state.set_state(Staff.state1)


@router1.callback_query(Staff.state1)
async def handler10(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    inline_kb3 = await generate_area()
    if callback.data == "–ö—Ä–µ–∫—à–∏–Ω–æ":
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=inline_kb3)
    #            await state.set_state(Staff2.state1)   
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç')


@router1.message(Command('admin'))
async def get_admin(message: Message, state: FSMContext):
    id = message.from_user.id
    if admins == id:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –∞–¥–º–∏–Ω. –¢—ã –ø—Ä–æ—Å—Ç–æ –±–æ–º–±–∞.', reply_markup=admin_kb)
        await state.set_state(Add_staff.state1)
    else:
        pass


@router1.message(Text('–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω'))
async def handler4(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
    await state.set_state(Add_staff.state1)


@router1.message(Add_staff.state1)
async def handler5(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–º–µ—Å—Ç–æ –≥–¥–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞)')
    await state.update_data(name=message.text)
    await state.set_state(Add_staff.state2)


@router1.message(Add_staff.state2)
async def handler5(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.')
    await state.update_data(city=message.text)
    await state.set_state(Add_staff.state3)


@router1.message(Add_staff.state3)
async def handler6(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞—à–∏–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º'
                         '–Ω–∞ —Ñ–æ–Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–µ.)')
    await state.update_data(amount=message.text)
    await state.set_state(Add_staff.state4)


@router1.message(Add_staff.state4)
async def handler21(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ª—é–±—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ—á—Ç–∞'
                         '–∏ —Ç.–¥.')
    await state.update_data(description=message.text)
    await state.set_state(Add_staff.state5)


@router1.message(Add_staff.state5)
async def handler21(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞. –ï—Å–ª–∏ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏—è –µ—ë –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    await state.update_data(info=message.text)
    await state.set_state(Add_staff.state6)


@router1.message(Add_staff.state6)
async def handler7(message: Message, state: FSMContext):
    chat_id = message.chat.id
    photo_id = message.photo[-1].file_id
    print(f'Photo id: {photo_id}')
    await state.update_data(photo=photo_id)
    data = await state.get_data()
    name = data.get('name')
    city = data.get('city')
    amount = data.get('amount')
    description = data.get('description')
    info = data.get('info')
    caption = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n'\
              f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {name} \n'\
              f'–ì–æ—Ä–æ–¥ - {city} \n'\
              f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {amount}\n'\
              f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {description}\n'\
              f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ - {info}\n'\
              #f'–§–æ—Ç–æ - {photo}'
    await bot.send_photo(chat_id=chat_id, photo=photo_id, caption = caption, reply_markup=admin2_kb)
    await state.set_state(Add_staff.state7)


@router1.message(Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥'), Add_staff.state7)
async def handler8(message: Message, state: FSMContext):
    await message.answer('–ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')
    data = await state.get_data()
    name = data.get('name')
    city = data.get('city')
    amount = data.get('amount')
    description = data.get('description')
    info = data.get('info')
    photo_id = data.get('photo')
    caption = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n' \
              f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {name} \n' \
              f'–ì–æ—Ä–æ–¥ - {city} \n' \
              f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {amount}\n' \
              f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {description}\n' \
              f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ - {info}\n' \
        # f'–§–æ—Ç–æ - {photo}'\
    await bot.send_photo(chat_id = moder_id, photo = photo_id, caption = caption, reply_markup = inline_kb3)
    await state.set_state(Add_staff.state8)


@router1.callback_query(Text('add_shop'), Add_staff.state8)
async def handler89(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    city = data.get('city')
    amount = data.get('amount')
    description = data.get('description')
    info = data.get('info')
    photo_id = data.get('photo')
    await admin_add_staff(None, name, city, amount, description, info, photo_id)




@router1.message(Add_staff.state8)
async def handler88(message: Message, state: FSMContext):
    await message.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø—è—Ç–∏ –¥–Ω–µ–π. ')
    data = await state.get_data()
    name = data.get('name')
    city = data.get('city')
    amount = data.get('amount')
    description = data.get('description')
    info = data.get('info')
    photo = data.get('photo')
#    await bot.send_message(chat_id = moder_id, text = text_message)

# @router1.message(Command('start'))
# async def handler_1(message: types.Message, state: FSMContext) -> None:
#    id = message.from_user.id
#    name = message.from_user.first_name
#    username = message.from_user.username
#    user_exists = await get_user(id)

#    if user_exists:
#        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#        await message.answer('–≠–ª–∏—Ç–Ω—ã–π —Å–ø–µ—Ü–Ω–∞–∑ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!')
#    else:
#        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –µ–º—É
#        image = ImageCaptcha(fonts=['caviar-dreams.ttf'], width=300, height=150)
#        letters = ['A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'Q', 'q', 'H', 'h', 'I', 'i',
#                   'J', 'j', 'K', 'k', 'L', 'l' 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r',
#                   '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
#        code = []
#        for i in range(7):
#            code.append(choice(letters))
#        image.write(code, 'out.png')
#        photo = FSInputFile('out.png')
#        a = ''
#        for el in code:
#            a += str(el)
#        print(a)
#        await SendPhoto(chat_id=message.from_user.id, photo=photo)
#        print(code)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Start, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω—ë–º –∫–æ–¥ –∫–∞–ø—á–∏
#        await state.set_state(Start.captcha_check)
#        await state.update_data(captcha=a, id=id, name=name, username=username)


# @router1.message(Start.captcha_check)
# async def captcha_check(message: Message, state: FSMContext):
#    data = await state.get_data()
#    captcha = data['captcha']
#    user_id = data['id']
#    name = data['name']
#    username = data['username']

#    if message.text == captcha:
# –ï—Å–ª–∏ –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#        await add_user(user_id, name, username)
#        await state.finish()
#        await message.answer('–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!')
