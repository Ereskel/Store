from aiogram import types, Router
from captcha.image import ImageCaptcha
from random import choice
from aiogram.methods.send_photo import SendPhoto
from aiogram.types import FSInputFile
from db import add_user, create_database, get_user, admin_add_staff, create_database_staff, delete_staff, \
    get_data_staff, create_database_staff2, admin_add_staff_valid, get_data_staff_valid
from state import Start, Add_staff, Staff, Staff2
from config import admins, moder_id

from keyboards.default import kb, admin_kb, admin2_kb
from keyboards.inline import inline_kb, generate_city, generate_area, inline_kb3, generate_add

'''
–ö–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢! –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø–∞—Å—É–µ–º. –ü–æ—Å–ª–µ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è. –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
—Å—Ä–∞–∑—É –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –ø—Ä–æ—à–µ–ª –æ–Ω –∫–∞–ø—á—É, –∏–ª–∏ –Ω–µ—Ç. 

–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è. –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä–∞—Ñ—É –ø—Ä–æ—à–µ–ª —á–µ–ª –∫–∞–ø—á—É –∏–ª–∏ –Ω–µ—Ç. –ù—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ 
–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤ –Ω–æ–ª—å, –∞ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ –µ–¥–∏–Ω–∏—Ü—É. –ï—Å–ª–∏ –≥–µ—Ç captcha –±—É–¥–µ—Ç == 1, —Ç–æ –≥—É–¥. –ï—Å–ª–∏ –Ω–µ—Ç
–¥–∞–µ–º –µ–º—É –∫–∞–ø—á—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–µ–ª –æ–Ω –µ—ë –∏–ª–∏ –Ω–µ—Ç. –ï—Å–ª–∏ –ø—Ä–æ—à–µ–ª, –∑–Ω–∞—á–∏—Ç –∏–Ω—Å–µ—Ä—Ç –≤ –≥—Ä–∞—Ñ—É –µ–¥–∏–Ω–∏—á–∫—É.
'''


@router1.message(Command('start'))
async def handler1(message: Message):
    await create_database_staff()
    id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username
    image = ImageCaptcha(fonts=['caviar-dreams.ttf'], width=300, height=150)
    letters = ['A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'Q', 'q', 'H', 'h', 'I', 'i',
               'J', 'j', 'K', 'k', 'L', 'l' 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r',
               '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
    code = []
    for i in range(7):
        code.append(choice(letters))
    image.write(code, 'out.png')
    photo = FSInputFile('out.png')
    a = ''
    for el in code:
        a += str(el)
    print(a)
    print(code)
    if await get_user(id) is None:
        await add_user(id, name, username)
        await SendPhoto(chat_id=message.from_user.id, photo=photo)
    else:
        await message.answer('–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –î–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!', reply_markup=kb)

    @router1.message(Text(a))
    async def handler2(message: Message):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç!')
    # else:
    # /   await message.answer('–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –î–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!')



@router1.message(Text('üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üõí'))
async def handler3(message: types.Message, state: FSMContext):
    inline_kb2, data = await generate_city()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä', reply_markup=inline_kb2)
    await state.set_state(Staff.state1)


@router1.callback_query(Staff.state1)
async def handler10(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    inline_kb3 = await generate_area()
    if callback.data == "–ö—Ä–µ–∫—à–∏–Ω–æ":
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=inline_kb3)
    #            await state.set_state(Staff2.state1)   
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç')


@router1.message(Command('admin'))
async def get_admin(message: Message, state: FSMContext):
    id = message.from_user.id
    if admins == id:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –∞–¥–º–∏–Ω..', reply_markup=admin_kb)
        await state.set_state(Add_staff.state1)
    else:
        pass


@router1.message(Text('–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω'))
async def handler4(message: Message, state: FSMContext):
    user_id = message.from_user.id
    db_data = await get_data_staff(user_id)
    db_data_valid = await get_data_staff_valid(user_id)
    print(db_data)
    if db_data:
        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.')
    if db_data_valid:
        await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω.4')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
        await state.set_state(Add_staff.state1)


@router1.message(Add_staff.state1)
async def handler5(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–º–µ—Å—Ç–æ –≥–¥–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞)')
    await state.update_data(shop_name=message.text)
    await state.set_state(Add_staff.state2)


@router1.message(Add_staff.state2)
async def handler5(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.')
    await state.update_data(city=message.text)
    await state.set_state(Add_staff.state3)


@router1.message(Add_staff.state3)
async def handler6(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞—à–∏–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º'
                         '–Ω–∞ —Ñ–æ–Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏.)')
    await state.update_data(amount=message.text)
    await state.set_state(Add_staff.state4)


@router1.message(Add_staff.state4)
async def handler21(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ª—é–±—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ—á—Ç–∞'
                         '–∏ —Ç.–¥.')
    await state.update_data(description=message.text)
    await state.set_state(Add_staff.state5)


@router1.message(Add_staff.state5)
async def handler21(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞. –ï—Å–ª–∏ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏—è –µ—ë –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    await state.update_data(info=message.text)
    await state.set_state(Add_staff.state6)


@router1.message(Add_staff.state6)
async def handler7(message: Message, state: FSMContext):
    chat_id = message.chat.id
    photo_id = message.photo[-1].file_id
    print(f'Photo id: {photo_id}')
    await state.update_data(photo=photo_id)
    data = await state.get_data()
    shop_name = data.get('shop_name')
    city = data.get('city')
    amount = data.get('amount')
    description = data.get('description')
    info = data.get('info')
    caption = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n' \
              f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {shop_name} \n' \
              f'–ì–æ—Ä–æ–¥ - {city} \n' \
              f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {amount}\n' \
              f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {description}\n' \
              f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ - {info}\n' \
        # f'–§–æ—Ç–æ - {photo}'
    await create_database_staff2()
    await bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption, reply_markup=admin2_kb)
    await state.set_state(Add_staff.state7)


@router1.message(Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥'), Add_staff.state7)
async def handler8(message: Message, state: FSMContext):
    await message.answer('–ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')
    user_id = message.from_user.id
    print(user_id)
    username = message.from_user.username
    name = message.from_user.first_name
    await state.update_data(user_id = user_id)
    data = await state.get_data()
    shop_name = data.get('shop_name')
    city = data.get('city')
    amount = data.get('amount')
    description = data.get('description')
    info = data.get('info')
    photo_id = data.get('photo')
    await admin_add_staff(None, user_id, name, username, shop_name, city, amount, description, info, photo_id)
    # –í–æ—Ç –∑–¥–µ—Å—å –º—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É. –û—Ç —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –ø–ª—è—Å–∞—Ç—å. –ò —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –º—ã –±—É–¥–µ–º
    # –∑–∞–±–∏—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã –∞ –Ω–µ –∏–∑ —Å—Ç–µ–π—Ç–æ–≤/
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω–µ—Å–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–∞–∫.
    await get_data_staff(user_id)
    db_data = await get_data_staff(user_id)
    print(db_data)
    db_user_id = db_data[1]
    db_name = db_data[2]
    db_username = db_data[3]
    db_shop_name = db_data[4]
    db_city = db_data[5]
    db_amount = db_data[6]
    db_description = db_data[7]
    db_info = db_data[8]
    db_photo_id = db_data[9]
    caption = f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user_id}\n\n' \
              f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n' \
              f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {db_shop_name} \n' \
              f'–ì–æ—Ä–æ–¥ - {db_city} \n' \
              f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {db_amount}\n' \
              f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - {db_description}\n' \
              f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ - {db_info}\n' \
        # f'–§–æ—Ç–æ - {photo}'\
    inline_kb_6 = await generate_add(user_id)
    await bot.send_photo(chat_id=1405036352, photo=photo_id, caption=caption, reply_markup=inline_kb_6)
    #  await bot.send_photo(chat_id=1405036352, photo=photo_id, caption=caption, reply_markup=inline_kb3)
    await state.clear()


@router1.callback_query()
async def handler9(callback: CallbackQuery, state: FSMContext):
    callback_data = callback.data
    print(callback_data)
    if callback_data[0] == 'add_shop':
        user_id = callback_data[1]
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {user_id}')
    elif callback_data[0] == 'decline_user':
        await callback.message.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
#    await get_data_staff(user_id)
 #   await admin_add_staff_valid(None, user_id, name, username, shop_name, city, amount, description, info, photo_id)


@router1.callback_query(Text('decline_shop'), Add_staff.state8)
async def handler90(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç–∏–∫!)')

    print(user_id)
    data = await state.get_data()
 #   user_id =
  #  print(user_id)
   # await delete_staff(user_id)


#@router1.message(Add_staff.state8)
#async def handler88(message: Message, state: FSMContext):
#    await message.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø—è—Ç–∏ –¥–Ω–µ–π. ')
#    data = await state.get_data()
#    name = data.get('name')
#    city = data.get('city')
#    amount = data.get('amount')
#    description = data.get('description')
#    info = data.get('info')
#fdfd    photo = data.get('photo')
#    await bot.send_message(chat_id = moder_id, text = text_message)

# @router1.message(Command('start'))
# async def handler_1(message: types.Message, state: FSMContext) -> None:
#    id = message.from_user.id
#    name = message.from_user.first_name
#    username = message.from_user.username
#    user_exists = await get_user(id)

#    if user_exists:
#        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#        await message.answer('–≠–ª–∏—Ç–Ω—ã–π —Å–ø–µ—Ü–Ω–∞–∑ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!')
#    else:
#        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –µ–º—É
#        image = ImageCaptcha(fonts=['caviar-dreams.ttf'], width=300, height=150)
#        letters = ['A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'Q', 'q', 'H', 'h', 'I', 'i',
#                   'J', 'j', 'K', 'k', 'L', 'l' 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r',
#                   '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
#        code = []
#        for i in range(7):
#            code.append(choice(letters))
#        image.write(code, 'out.png')
#        photo = FSInputFile('out.png')
#        a = ''
#        for el in code:
#            a += str(el)
#        print(a)
#        await SendPhoto(chat_id=message.from_user.id, photo=photo)
#        print(code)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Start, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω—ë–º –∫–æ–¥ –∫–∞–ø—á–∏
#        await state.set_state(Start.captcha_check)
#        await state.update_data(captcha=a, id=id, name=name, username=username)


# @router1.message(Start.captcha_check)
# async def captcha_check(message: Message, state: FSMContext):
#    data = await state.get_data()
#    captcha = data['captcha']
#    user_id = data['id']
#    name = data['name']
#    username = data['username']

#    if message.text == captcha:
# –ï—Å–ª–∏ –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#        await add_user(user_id, name, username)
#        await state.finish()
#        await message.answer('–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!')
